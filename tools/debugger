#!/usr/bin/env ruby

require 'socket'
require 'readline'

class AkariDebuggerSocket < TCPSocket
	def getU32; read(4).unpack('V').first; end
	def getMessage
		read getU32
	end

	def putU32 n; write [n].pack('V'); end
	def putMessage m
		putU32 m.length
		write m
	end

	def sendCommand c, *a
		putMessage c
		a.each do |i|
			if i.is_a? Integer
				putU32 i
			elsif i.is_a? String
				putMessage i
			else
				raise "No idea how to write #{i.inspect} (#{i.class})"
			end
		end

		code = getU32
		raise code unless code.zero?
		code
	end
end

s = AkariDebuggerSocket.open 'localhost', 18148

s.sendCommand "version"
akari_version = s.getMessage
puts "debugger connected to Akari #{akari_version}"

while true
	c = Readline.readline("> ")
	break if c.nil?

	command, *args = c.split(/\s+/)

	case command
	when 'get'
		s.sendCommand "get", args[0].to_i(16), args[1].to_i(16)
		p s.read(args[1].to_i(16))
	when 'receive'
		if args.length != 1
			puts "Usage: receive FILENAME"
		else
			s.sendCommand "receive"
			File.open(args.first, "w") {|f| f.write(s.getMessage)}
		end
	end
end
